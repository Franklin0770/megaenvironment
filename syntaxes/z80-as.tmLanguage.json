{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "The Macroassembler AS - Zilog Z80",
	"scopeName": "source.z80-as",
	"foldingStartMarker": "^\\s*(?i:macro|if|ifn?(?:def|symexist|used|exist|b)|rept|irpc?|while|function|struct|switch)\\b",
	"foldingStopMarker": "^\\s*(?i:end(?:if|struct|case|m))\\b",
	"patterns": [
		{ "include": "#instruction-label-structure" },
		{ "include": "#instructions" },
		{ "include": "#variables" },
		{ "include": "#constants" },
		{ "include": "#comments" },
		{ "include": "#strings" },
		{ "include": "#labels" },
		{ "include": "#symbols" },
		{ "include": "#operators" },
		{ "include": "#functions" },
		{ "include": "#pseudo-instructions" }
	],
	"repository": {
		"instructions": {
			"patterns": [
				{
					"name": "instruction.mnemonic.as",
					"match": "\\b(?i:ld|push|pop|exx?|ld[id]r?|cp[id]r?|add|sub|sbc|and|x?or|cp|inc|dec|daa|cpl|neg|[cs]cf|nop|halt|[ed]i|im|r[lr]c?a|lrc?|rrc?|s[lr]a|srl|rld|rrd|bit|set|res|djnz|ini?r?|indr?|out[ir]?|ot[id]r)\\b"
				},
				{
					"name": "instruction.jump.as",
					"match": "\\b(?i:j[pr]|call|ret[in]?|rst)\\b"
				}
			]
		},
		"variables": {
			"name": "variable.register.as",
			"match": "\\b(?i:af|bc|de|hl|ix|iy|sp|pc|a|b|c|d|e|h|l|r|i)\\b|(?<=f)'(?!\\w)"
		},
		"constants": {
			"name": "constant.numeric.as",
			"match": "(?<![\\w\\)])(?:-?\\d{1,10}|[0-9a-fA-F]{1,8}h|%[01]{1,32}b|@[0-7]{1,11}[oq])(?!\\w)"
		},
		"comments": {
			"name": "directive.comment.as",
			"match": "(?:\\;.*$)"
		},
		"strings": {
			"patterns": [
				{
					"name": "directive.string.as",
					"begin": "\"",
					"end": "\""
				},
				{
					"name": "directive.string.as",
					"begin": "(?<!\\w)'",
  					"end": "'(?!\\w)"
				}
			]
		},
		"labels": {
			"patterns": [
				{
					"name": "directive.label.global.as",
					"match": "(?:^\\w+:?)|(?:\\s\\w+:)"
				},
				{
					"name": "directive.label.local.as",
					"match": "(?:^\\.[\\w\\.]+:?)|(?:\\s\\.[\\w\\.]+:)"
				},
				{
					"name": "directive.label.temporary.as",
					"match": "(?:^\\$\\$[\\w\\.]+:?)|(?:\\s\\$\\$[\\w\\.]+:)"
				},
				{
					"name": "directive.label.nameless.as",
					"match": "^[+-]$"
				}
			]
		},
		"operators": {
			"name": "directive.operator.as",
			"match": "(?:\\w[\\s\\(]?)?\\K(?::=|==|!=|<=|>=|<>|<<|>>|\\|\\||&&|!!|><|[-+*\\/#^~|&=<>!])"
		},
		"functions": {
			"name": "directive.function.as",
			"match": "\\b(?i:sqrt|a?sinh?|a?cosh?|a?tanh?|a?coth?|exp|a?log|a?ld|ln|int|bit(?:cnt|pos)|(?:first|last)bit|sgn|abs|to(?:upper|lower)|(?:up|low)string|strlen|substr|charfromstr|strstr|val|exprtype|fsize)\\b"
		},
		"symbols": {
			"name": "directive.symbol.as",
			"match": "(?<!\\w)(?:TRUE|FALSE|CONSTPI|FLOATMAX|VERSION|ARCHITECTURE|DATE|TIME|MOM(?:CPU(?:NAME)?|FILE|LINE|PASS|SECTION)|[\\.\\$])(?![\\w\\$])"
		},
		"pseudo-instructions": {
			"name": "directive.pseudo.as",
			"match": "\\b(?i:set|equ|label|charset|codepage|pushv|popv|r?org|cpu|supmode|padding|segment|(?:de)?phase|save|restore|assume|(?:end)?expect|d[cs]|align|macro|irpc?|rept|while|exitm|shift|maxnest|function|endm?|(?:end)?struct|(?:end)?if|ifn?(?:def|symexist|used|exist|b)|else(?:if)?|switch|(?:else|end)?case|page(?:size)?|newpage|macexp_(?:dft|ovr)|listing|title|(?:out)?radix|public|global|forward|shared|b?include|message|warning|error|fatal|read|intsyntax|relaxed|compmode)\\b"
		},
		"instruction-label-structure": {
			"name": "instruction.label.as",
			"match": "\\b(?i:(j[pr]|call))\\b\\s+((?:\\.?|\\$\\$)?(?:[\\w\\.]+|[+-]))",
			"captures": { 
				"1": { "name": "instruction.jump.as"},
				"2": { "name": "directive.label.jump.as" }
			}
		}
	}
}